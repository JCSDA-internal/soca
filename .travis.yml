#================================================================================
# TravisCI configuration script
#
# The following environment variables need to be defined:
#   MAIN_REPO   - The name of this repo being tested, as spelled in the bundle
#   LIB_REPOS   - A list of the dependency repos, in the order that they are to be
#                 built. If the script detects a repo needs to be rebuit, all repos
#                 listed after it will be rebuilt as well. These repos will be
#                 cached. (So try to list large, rarely chaning repos, first)
#   BUILD_OPT_{REPO} - For each repo optional arguments to pass to ecbuild
#   MATCH_REPOS - All repos in $LIB_REPO will use the branch listed in the bundle
#                 unless listed in $MATCH_REPOS
#   LFS_REPOS   - All repos in $LIB_REPO will not use git-lfs when checked out
#                 unless listed in $LFS_REPOS
#
# NOTE: these scripts have been changed to assume the bundle CMakeLists.txt
#  is in this repository directly
#================================================================================

env:
  global:
    - MAIN_REPO=soca
    - LIB_REPOS="jedicmake fckit atlas fms gsw mom6 crtm oops saber ioda ufo"
    - BUILD_OPT=""
    - BUILD_OPT_fckit="-DBUILD_FCKIT=ON"
    - BUILD_OPT_atlas="-DBUILD_ATLAS=ON"
    - BUILD_OPT_crtm="-DBUILD_CRTM=ON"
    - BUILD_OPT_mom6="-DENABLE_OCEAN_BGC=ON"
    - BUILD_OPT_oops="-DENABLE_QG_MODEL=OFF -DENABLE_LORENZ95_MODEL=OFF"
    - BUILD_OPT_ufo="-DLOCAL_PATH_TESTFILES_IODA=NONE"
    - BUILD_OPT_soca="-DSOCA_TESTS_FORC_DEFAULT_TOL=ON -DENABLE_OCEAN_BGC=ON"
    - MATCH_REPOS="saber oops ioda ufo mom6 soca"
    - LFS_REPOS=""
    # ENABLE_VALGRIND="ON"

branches:
  only:
    - develop
    - master
    - /.*/travisci_.*$/

language: cpp

services:
  - docker

cache:
  ccache: true
  directories:
  - $HOME/repo.cache


#================================================================================
# Download and prepare the repositories and setup the docker image
# The working directory will then contain the following directories, with {repo}
# being each repository listed in $LIB_REPOS and $MAIN_REPO
#   ./repo.bundle/{repo}/ - Modified versions of the bundle to individually build repos
#   ./repo.src/{repo}/    - The source from github
#   ./repo.build/{repo}/  - The build directory
#   $HOME/repo.cache/{repo}/ - The cached results from `make install` for each
#                           $LIB_REPOS from previous builds on TravisCI
#================================================================================
before_install:
  - |
    # setup other configurables that the subsequent scripts use
    export MAIN_BUILD_TYPE=Debug
    export LIB_BUILD_TYPE=RelWIthDebInfo
    export BRANCH=$( [[ "$TRAVIS_PULL_REQUEST" == "false" ]] && \
                     echo $TRAVIS_BRANCH || echo $TRAVIS_PULL_REQUEST_BRANCH )
    export_vars="-e REPO_CACHE=/repo.cache -e LIB_REPOS -e LIB_BUILD_TYPE
                 -e MAIN_REPO -e MAIN_BUILD_TYPE -e CCACHE_DIR=/ccache -e BUILD_OPT
                 -e ENABLE_VALGRIND"
    for v in $(env | grep BUILD_OPT_ | cut -d'=' -f 1); do
      export_vars="$export_vars -e $v"
    done

  - |
    # clone and prep the repos
    # note: the main repo is not handled by the prep.sh script, it is moved from
    # what TravisCI auto checks out (because TravisCI handles PR merges specially)
    git config --global url.https://${GH_TOKEN}@github.com/.insteadOf https://github.com/
    WORK_DIR=$HOME/work
    mkdir -p $WORK_DIR/repo.src; cd $WORK_DIR
    mv ${TRAVIS_BUILD_DIR} ${WORK_DIR}/repo.src/${MAIN_REPO}
    REPO_CACHE=$HOME/repo.cache ${WORK_DIR}/repo.src/${MAIN_REPO}/.github/travisci/prep.sh

  - |
    # alter file permissions
    chmod 777 -R ~/.ccache
    chmod 777 -R $HOME/repo.cache
    cd ${WORK_DIR} && find . -name \* -exec chmod 777 {} \;

  - |
    # prepare docker image from jcsda/docker:latest
    cd ${WORK_DIR}/repo.src/${MAIN_REPO}/.github/travisci
    docker build -t jcsda/dockerl2 .
    docker images
    ci_env=`bash <(curl -s https://codecov.io/env)`
    docker run -d -t $ci_env $export_vars \
      -v ${WORK_DIR}:/jcsda/work \
      -v $HOME/.ccache:/ccache \
      -v $HOME/repo.cache:/repo.cache \
      --name jcsda_container jcsda/dockerl2
    docker ps -a

#======================================================================
# Here are the run steps
#======================================================================
script:
  - |
    # Build code
    docker exec -it jcsda_container bash \
     -c 'cd /jcsda/work && /jcsda/work/repo.src/${MAIN_REPO}/.github/travisci/build.sh; exit $?' \
     || travis_terminate 1

  - |
    # run tests
    docker exec -it jcsda_container bash \
     -c 'cd /jcsda/work/repo.build/${MAIN_REPO} && ctest --output-on-failure' \
     || travis_terminate 1


#======================================================================
#======================================================================
after_success:
  - |
    # upload code coverage
    docker exec jcsda_container bash -c \
      'cd /jcsda/work/repo.src/${MAIN_REPO} \
       && bash <(curl -s https://codecov.io/bash) -p /jcsda/work/repo.build/${MAIN_REPO} -s . -X gcovout'

  - |
    # If this is a cron run, update the release/stable branch of the bundle
    if [[ "$TRAVIS_EVENT_TYPE" == "cron" && "$TRAVIS_BRANCH" == "develop" ]]; then
        docker exec jcsda_container bash -c \
          'cd /jcsda/work && repo.src/${MAIN_REPO}/.github/travisci/stable_mark.sh'
        cd ${WORK_DIR} && ${WORK_DIR}/repo.src/${MAIN_REPO}/.github/travisci/stable_commit.sh
    fi
